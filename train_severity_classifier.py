import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
import joblib

# Load the generated incidents data
# Make sure 'incidents.csv' exists (generated by generate_incidents.py)
df = pd.read_csv("incidents.csv")

# Use incident_description as text feature
vectorizer = TfidfVectorizer(max_features=200)
X_text = vectorizer.fit_transform(df["incident_description"])

# Combine text features with one-hot encoded type and department
X_cat = pd.get_dummies(df[["type", "department"]])
from scipy.sparse import hstack

X = hstack([X_text, X_cat.values])

y = df["severity"]

# Split data for training/testing
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train a classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Evaluate accuracy
accuracy = clf.score(X_test, y_test)
print(f"Test accuracy: {accuracy:.2f}")

# Save the trained model and vectorizer for later use
joblib.dump(clf, "severity_classifier.joblib")
joblib.dump(vectorizer, "severity_vectorizer.joblib")
print(
    "Model and vectorizer saved as severity_classifier.joblib and severity_vectorizer.joblib"
)
